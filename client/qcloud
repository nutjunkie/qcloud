#!/usr/bin/env python3

import re
import os
import sys
import socket
import getpass
import pathlib
import configparser
import urllib.parse
import urllib.request

from contextlib import closing

DEBUG  = 0
CONFIG = 0

CONFIG_FILE = 0


def help(arg):
    if (len(arg) == 0):
       arg = "Submits Q-Chem calculations to a cloud server."
    print(arg)
    print("""Usage:
    qcloud submit  qcinput
    qcloud batch   batchfile  input1 [input2...]
    qcloud get     qcinput
    qcloud getall  [pattern]
    qcloud clear   [pattern]
    qcloud status  [qcinput/pattern]
    qcloud adduser [username]
    qcloud addhost [hostname]""")
    exit(0)



class QcloudError(Exception):
    pass



class InvalidToken(Exception):
    pass



def debug(msg):
    if (DEBUG):
       print("DEBUG: %s" % msg)



def config_file_path():
    config_file = os.path.join(pathlib.Path.home(), ".qcloud_client.cfg")
    return config_file



def load_config(config_file):
    debug('Using config file {}'.format(config_file))
    config = configparser.ConfigParser()
    config.read(config_file)
    return config



def update_config(section, key, value):
    if (section not in CONFIG): 
       CONFIG.add_section(section)
    CONFIG.set(section, key, value)

    

def write_config_file(config_file):
    if (not config_file): 
       raise QcloudError("Config file not set")
    with open(CONFIG_FILE, 'w') as cfg:
       CONFIG.write(cfg)



def test_socket(host, port):
    with closing(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) as sock:
        sock.settimeout(2) 
        if sock.connect_ex((host, port)) == 0:
           debug("Port {0}:{1} is open".format(host,port))
           return True
    debug("Port {0}:{1} is closed".format(host,port))
    return False



def addhost(dummy):
    comp_host = None
    while (not comp_host):
       comp_host = input("QCloud host: ").strip()
    comp_port = input("QCloud port [{0}]: ".format(8883)).strip()

    if (not comp_port): 
       comp_port = 8883
    if (not test_socket(comp_host, comp_port)): 
       raise QcloudError("Host unreachable")

    auth_host = input("Authorisation host [{0}]: ".format(comp_host)).strip()
    if (not auth_host): 
       auth_host = comp_host
       
    auth_port = input("Authorisation port [{0}]: ".format(8882)).strip()
    if (not auth_port): 
       auth_port = 8882
    if (not test_socket(auth_host, auth_port)): 
       raise QcloudError("Host unreachable")

    debug("Computational host: {0}".format(comp_host))
    debug("Computational port: {0}".format(comp_port))
    debug("Authorisation host: {0}".format(auth_host))
    debug("Authorisation port: {0}".format(auth_port))

    update_config("host", "computational_host", comp_host)
    update_config("host", "computational_port", str(comp_port))
    update_config("host", "authorisation_host", auth_host)
    update_config("host", "authorisation_port", str(auth_port))
    update_config("host", "admin_account", "root")
    write_config_file(CONFIG_FILE)



def check_config():
    if ("host" not in CONFIG):
       raise QcloudError("Use 'qcloud addhost' to set host machine")
    if ("user" not in CONFIG):
       raise QcloudError("Use 'qcloud adduser' to set user name")
    


def comp_host():
    host  = "http://" + CONFIG.get("host", "computational_host") 
    host += ":"       + CONFIG.get("host", "computational_port")
    return host;


def auth_host():
    host  = "http://" + CONFIG.get("host", "authorisation_host") 
    host += ":"       + CONFIG.get("host", "authorisation_port")
    return host;
 


def username_is_valid(uname):
    regexp = re.compile("^(?=.{3,20}$)(?![_.])(?!.*[_.]{2})[a-zA-Z0-9._]+(?<![_.])$")
    return regexp.match(uname) 



def check_response_status(response):
    status = response.headers.get("Qcloud-Server-Status")
    if (status == "OK"):
       return True
    else:
       msg = response.headers.get("Qcloud-Server-Message")
       if (msg is None):
          msg = "Request failed"
       elif 'JWT' in msg: 
          raise InvalidToken(msg)
       else:
          msg = "Request failed: " + msg
          print(msg)

       return False



def request_token(username, password):
    req = urllib.request.Request(auth_host() + "/token")
    req.add_header('Qcloud-Client-User', username)
    req.add_header('Qcloud-Client-Password', password)

    res = urllib.request.urlopen(req)
    if (check_response_status(res)):
       token = res.headers.get("Qcloud-Token")
       return token
    


def request_adduser(username, password, authorisation):
    req = urllib.request.Request(auth_host() + "/adduser")
    req.add_header('Qcloud-Client-User', username)
    req.add_header('Qcloud-Client-Password', password)
    req.add_header('Qcloud-Client-Authorisation', authorisation)

    res = urllib.request.urlopen(req)
    if (check_response_status(res)):
       token = res.headers.get("Qcloud-Token")
       return token



def request_submit(token, input):
    debug("Entering request_submit subroutine")
    cookie = urllib.parse.urlencode({'cookie' : token })
    url = comp_host() + "/submit?" + cookie
    data = ''.join(input)
    data = data.encode('ascii')
    debug("  data: %s" % data)

    req = urllib.request.Request(url, data)
    res = urllib.request.urlopen(req, timeout=5)
    debug("Submit URL: %s" % url)

    jobid = 0
    if (check_response_status(res)):
       jobid = res.headers.get("Qcloud-Server-Jobid")

    return jobid 



def request_new_token():
    if ("user" not in CONFIG):
       raise QcloudError("Use 'qcloud adduser' to set user name")
    username = CONFIG.get("user", "name")
    prompt = "Password for " + username + ": "
    password = getpass.getpass(prompt)

    req = urllib.request.Request(auth_host() + "/token")
    req.add_header('Qcloud-Client-User', username)
    req.add_header('Qcloud-Client-Password', password)

    res = urllib.request.urlopen(req)
    if (not check_response_status(res)):
       raise QcloudError("Unable to obtain new token") 

    token = res.headers.get("Qcloud-Token")
    CONFIG.set("user", "token", token)
    with open(CONFIG_FILE, 'w') as cfg:
         CONFIG.write(cfg)
    return token



def request_status(token, jobid):
    data = urllib.parse.urlencode({'cookie' : token, 'jobid' : jobid })
    data = data.encode('ascii')
    req  = urllib.request.Request(comp_host() + "/status", data)
    res  = urllib.request.urlopen(req)

    if (check_response_status(res)):
       status = res.headers.get("Qcloud-Server-Jobstatus")
       return status 



def request_delete(token, jobid):
    data = urllib.parse.urlencode({'cookie' : token, 'jobid' : jobid })
    data = data.encode('ascii')
    req  = urllib.request.Request(comp_host() + "/delete", data)
    res  = urllib.request.urlopen(req)

    if (check_response_status(res)):
       status = res.headers.get("Qcloud-Server-Jobstatus")
       return status 



def request_list(token, jobid):
    data = urllib.parse.urlencode({'cookie' : token, 'jobid' : jobid })
    data = data.encode('ascii')
    req  = urllib.request.Request(comp_host() + "/list", data)
    res  = urllib.request.urlopen(req)
    if (check_response_status(res)):
       files = res.read().decode().split("\n") 
       while("" in files):
           files.remove("")
       return files



def request_download(token, jobid, file):
    data = urllib.parse.urlencode({'cookie' : token, 'jobid' : jobid, 'file' : file })
    data = data.encode('ascii')
    req  = urllib.request.Request(comp_host() + "/download", data)
    res  = urllib.request.urlopen(req)

    if (check_response_status(res)):
       return res.read().decode()


def get_current_token():
    if ("user" not in CONFIG or "token" not in CONFIG["user"]):
         raise QcloudError("Use 'qcloud adduser' to set user name")
    return CONFIG.get("user", "token")



def adduser(args):
    if ("host" not in CONFIG or "admin_account" not in CONFIG["host"]):
       raise QcloudError("Use 'qcloud addhost' to set host machine")

    if ("user" in CONFIG and "name" in CONFIG["user"]):
       raise QcloudError("User " + CONFIG.get("user", "name") + " exists in " + CONFIG_FILE)

    rootpw = getpass.getpass("Qcloud admin password: ")
    token  = request_token(CONFIG.get("host","admin_account"), rootpw)
    uname  = sys.argv[0] if (len(args) == 1) else input("User name: ")

    if (not username_is_valid(uname)):
       print("Usage:  qcloud adduser [username]")
       raise QcloudError("User name must betweeen 3-20 alphanumeric characters")

    tries = 0
    prompt = "Password for " + uname + ": "
    userpw = getpass.getpass(prompt)
    while (len(userpw) < 6 and tries < 3):
        print("Password must be at least 6 characters") 
        userpw = getpass.getpass(prompt)
        ++tries
    if (tries == 3): 
       raise QcloudError("Request failed: password too short")

    userpw2 = getpass.getpass("Re-enter password: ")
    if (userpw != userpw2):  
       raise QcloudError("Request failed: passwords do not match")

    token = request_adduser(uname, userpw, rootpw)

    if (token):
       if ("user" not in CONFIG):
          CONFIG.add_section("user")
       CONFIG.set("user", "name", uname)
       CONFIG.set("user", "token", token)
       with open(CONFIG_FILE, 'w') as cfg:
            CONFIG.write(cfg)
       print("User " + uname + " successfully added")



def add_job(jid, fname):
    if ("jobs" not in CONFIG):
       CONFIG.add_section("jobs")
    CONFIG.set("jobs", jid, fname)
    with open(CONFIG_FILE, 'w') as cfg:
         CONFIG.write(cfg)


def remove_job(jid):
    del CONFIG["jobs"][jid]
    with open(CONFIG_FILE, 'w') as cfg:
         CONFIG.write(cfg)



def matching_jobs(patterns):
    if ("jobs" not in CONFIG):
       raise  QcloudError("No jobs found")

    all_jobs = CONFIG["jobs"]
    jobs = []

    if (len(patterns) == 0):
       jobs = all_jobs
    else:
       for jobid in all_jobs:
           for p in patterns:
               if (p in all_jobs[jobid]):
                  jobs.append(jobid) 
                  break
    return jobs



def relpath(jobid):
    job = CONFIG.get("jobs", jobid)
    (dir, job) = os.path.split(job)
    dir = os.path.relpath(dir)
    return os.path.join(dir,job)



def status(args):
    jobs = matching_jobs(args)

    for jobid in jobs:
        status = request_status(get_current_token(), jobid)
        if (status == "INVALID"):
           print("Removing invalid job id: %s" % jobid)
           remove_job(jobid)
        else:
           status = "{0:<8}".format(str(status))
           print(status, relpath(jobid))


def delete(args):
    jobs = matching_jobs(args)

    for jobid in jobs:
        status = request_delete(get_current_token(), jobid)
        print("Deleteing job from queue id: %s - status" % (jobid,status))




def download(jobs):
    for jobid in jobs:
        debug("downloading files for {}".format(jobid))
        path = relpath(jobid)
        (dir, inp) = os.path.split(path)
        (base,ext) = os.path.splitext(inp)
        
        if (not (ext == ".inp" or ext == ".in" or ext == ".qcin")):
           base = inp 

        files = request_list(get_current_token(), jobid)
        if (not files):
           raise QcloudError("No files to download")
        fnames = { "input"      : inp, 
                   "output"     : base + ".out",
                   "fchk"       : base + ".fchk",
                   "input.fchk" : base + ".fchk" }

        k = 1; # used to generate unique filenames
        for file in files:
            debug("downloading file {}".format(file))
            body = request_download(get_current_token(), jobid, file)
            
            if body.strip(): # skip empty files
               fname = fnames.get(file, file)
               debug("  %s -> %s" % (file, fname))
               path = os.path.join(dir, fname)

#              if os.path.isfile(path):
#                 response = input("Overwrite %s? [Y/n] " % path)
#                 if (response == 'n' or response == 'N'):
#                    while os.path.isfile("%s_%s".format(path,k)):
#                       ++k;
#                    path += "_"+str(k)

               print("Downloading " + path)

               with open(path, 'w') as text_file:
                    text_file.write(body)        


def clear(args):
    jobs = matching_jobs(args)

    for jobid in jobs:
        status = request_status(get_current_token(), jobid)
        if (status == "DONE"):
           print("Removing completed job id: %s" % jobid)
           remove_job(jobid)
 


def get(args):
    jobs = matching_jobs(args)
    if (len(jobs) == 0):
       raise QCloudError("No jobs matched") 
    elif (len(jobs) == 1):
       download(jobs)
    else:
        print("String matches multiple jobs:")
        for jobid in jobs:
            print(relpath(jobid))



def get_all(args):
    jobs = matching_jobs(args)
    if (len(jobs) == 0):
       raise QCloudError("No jobs matched") 
    download(jobs)



def submit(args):
    if (len(args) == 0): 
       help("Too few arguments passed to submit option")

    for qcin in args:
        with open(qcin) as f:
             input = f.readlines()

        jid = request_submit(get_current_token(), input)
        debug("jobid %s" % jid)
        if (jid):
           print("QChem job " + qcin + " submitted")
           path = os.path.join(os.getcwd(), qcin)
           add_job(jid, path)
        else:
           print("QChem batch job " + qcin + " failed to submit")



def batch(args):
    debug("Entering batch subroutine")
    if (len(args) < 2):
       help("Too few arguments passed to batch option")

    slurm_file_name = args[0]  
    slurm = ["$slurm\n"]

    with open(slurm_file_name) as f:
         debug("opening SLURM batch file: %s" % slurm_file_name)
         slurm.extend(f.readlines())

    iter_qcin = iter(args)
    next(iter_qcin)

    for qcin in iter_qcin:
        input = slurm
        input.append("#SBATCH --job-name="+qcin+"\n$end\n\n")
        
        with open(qcin) as f:
             debug("opening input file: %s" % qcin)
             input.extend(f.readlines())
             
        jid = request_submit(get_current_token(), input)

        debug("jobid %s" % jid)
        if (jid):
           print("QChem batch job " + qcin + " submitted")
           path = os.path.join(os.getcwd(), qcin)
           add_job(jid, path)
        else:
           print("QChem batch job " + qcin + " failed to submit")

      

if __name__ == '__main__':

    handlers = { 'status'  : status, 
                 'batch'   : batch,
                 'submit'  : submit,
                 'sub'     : submit,
                 'run'     : submit,
                 'get'     : get,
                 'clear'   : clear,
                 'delete'  : delete,
                 'del'     : delete,
                 'getall'  : get_all,
                 'adduser' : adduser,
                 'addhost' : addhost,
                 'help'    : help }

    if (len(sys.argv) > 2 and sys.argv[1] == "-d"):
       DEBUG = 1
       sys.argv.pop(1)

    if (len(sys.argv) < 2): help("Must specify sub option.")
    debug("Sub-option %s called" % sys.argv[1])
       
    func = handlers.get(sys.argv[1], help)
    del sys.argv[0:2] # remove program and command

    try:
       CONFIG_FILE = config_file_path()
       CONFIG = load_config(CONFIG_FILE)

       if (not (func == addhost or func == adduser) ):
          check_config()

       try:
          func(sys.argv)
       except InvalidToken:
          request_new_token()
          func(sys.argv)

    except KeyboardInterrupt:
       sys.exit(1)

    except ConnectionRefusedError as e:
       print("Connection refused")
       
    except IOError as e:
       if (e.filename is not None):
          print("File not found: " +  e.filename)

    except urllib.error.HTTPError as e:
       print("Request failed: " + e.reason)

    except urllib.error.URLError as e:
       print("Request failed: " + e.reason)

    except (QcloudError, Exception) as e:
       print(str(e))
